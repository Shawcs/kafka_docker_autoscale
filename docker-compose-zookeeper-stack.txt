version: '3.2'
services:
  zookeeper1:
    image: zookeeper:latest
    deploy:
	  mode: global
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    hostname: zookeeper1
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888 server.2=zookeeper2:2888:3888 server.3=zookeeper3:2888:3888
    networks:
      - zookeeper_ZookeeperNetwork
  zookeeper2:
    image: zookeeper:latest
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    hostname: zookeeper2
    ports:
      - 2182:2181
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zookeeper1:2888:3888 server.2=0.0.0.0:2888:3888 server.3=zookeeper3:2888:3888
    networks:
      - zookeeper_ZookeeperNetwork
  zookeeper3:
    image: zookeeper:latest
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    hostname: zookeeper3
    ports:
      - 2183:2181
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zookeeper1:2888:3888 server.2=zookeeper2:2888:3888 server.3=0.0.0.0:2888:3888
    networks:
      - zookeeper_ZookeeperNetwork
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - visualizernet
#this to expose the network to other stack
networks:
  zookeeper_ZookeeperNetwork:
   external: true
  visualizernet:
