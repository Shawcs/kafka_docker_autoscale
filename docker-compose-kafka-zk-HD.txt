version: '3.2'
services:
  zookeeper1:
    image: zookeeper:latest
    deploy:
      placement:
        constraints: [node.role == manager]
    restart: always
    hostname: zookeeper1
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888 server.2=zookeeper2:2888:3888 server.3=zookeeper3:2888:3888
    networks:
      - ZookeeperNetwork
  zookeeper2:
    image: zookeeper:latest
    deploy:
      placement:
        constraints: [node.role == manager]
    restart: always
    hostname: zookeeper2
    ports:
      - 2182:2181
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zookeeper1:2888:3888 server.2=0.0.0.0:2888:3888 server.3=zookeeper3:2888:3888
    networks:
      - ZookeeperNetwork
  zookeeper3:
    image: zookeeper:latest
    deploy:
      placement:
        constraints: [node.role == manager]
    restart: always
    hostname: zookeeper3
    ports:
      - 2183:2181
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zookeeper1:2888:3888 server.2=zookeeper2:2888:3888 server.3=0.0.0.0:2888:3888
    networks:
      - ZookeeperNetwork
  kafka:
    image: wurstmeister/kafka:latest
    deploy:
     placement:
      constraints: [node.role != manager]
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    ports:
     - target: 9094
       published: 9094
       protocol: tcp
       mode: host
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      RACK_COMMAND: '1'
      KAFKA_BROKER_ID: 1
      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_PROTOCOL_NAME: OUTSIDE
      KAFKA_ADVERTISED_PORT: 9094
      KAFKA_PROTOCOL_NAME: INSIDE
      KAFKA_PORT: 9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - ZookeeperNetwork
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - visualizernet
networks:
  ZookeeperNetwork:
  KafkaNetwork:
  visualizernet:
